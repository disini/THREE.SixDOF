{"version":3,"file":"three-6dof.min.js","sources":["../src/components/style.ts","../src/components/density.ts","../src/components/texture.ts","../src/components/uniforms.ts","../src/components/viewer.ts"],"sourcesContent":["export enum Style {\n  WIRE = 0,\n  POINTS = 1,\n  MESH = 2,\n}\n","export enum MeshDensity {\n  LOW = 64,\n  MEDIUM = 128,\n  HIGH = 256,\n  EXTRA_HIGH = 512,\n  EPIC = 1024,\n}\n","export enum TextureType {\n  TOP_BOTTOM,\n  SEPERATE,\n}\n","import { Vector2, Vector4 } from 'three'\n\nexport const Uniforms: object = {\n  map: {\n    type: 't',\n    value: null,\n  },\n  depthMap: {\n    type: 't',\n    value: null,\n  },\n  time: {\n    type: 'f',\n    value: 0.0,\n  },\n  opacity: {\n    type: 'f',\n    value: 1.0,\n  },\n  pointSize: {\n    type: 'f',\n    value: 3.0,\n  },\n  debugDepth: {\n    type: 'f',\n    value: 0.0,\n  },\n  isSeperate: {\n    type: 'b',\n    value: false,\n  },\n  displacement: {\n    type: 'f',\n    value: 1.0,\n  },\n}\n","import {\n  Object3D,\n  ShaderMaterial,\n  TextureLoader,\n  BackSide,\n  Mesh,\n  Points,\n  SphereBufferGeometry,\n  Texture,\n} from './three'\n\n// @ts-ignore\nimport frag from '../shaders/sixdof.frag'\n// @ts-ignore\nimport vert from '../shaders/sixdof.vert'\n\nimport { Uniforms } from './uniforms'\nimport { Style } from './style'\nimport { MeshDensity } from './density'\nimport { TextureType } from './texture'\n\nexport default class Viewer extends Object3D {\n  public props: object\n  protected loader: TextureLoader = new TextureLoader()\n  protected obj: Object3D\n  protected geometry: SphereBufferGeometry\n  protected material: ShaderMaterial = new ShaderMaterial({\n    uniforms: Uniforms,\n    vertexShader: vert,\n    fragmentShader: frag,\n    transparent: true,\n    side: BackSide,\n  })\n\n  constructor(\n    texturePath: string = undefined,\n    depthPath?: string,\n    textureType: TextureType = TextureType.TOP_BOTTOM,\n    meshDensity: MeshDensity = MeshDensity.HIGH,\n    style: Style = Style.MESH,\n    displacement: number = 1,\n  ) {\n    super()\n\n    if (!texturePath) {\n      throw new Error('Texture path must be defined when creating a viewer')\n    }\n\n    this.createSphere(6, meshDensity)\n    this.setTextures(texturePath, depthPath, textureType)\n    this.setDisplacement(displacement)\n\n    /** Create the Mesh/Points and add it to the viewer object */\n    this.obj = this.createSceneObjectWithStyle(style)\n    super.add(this.obj)\n  }\n\n  private createSphere(radius: number, meshDensity: MeshDensity): void {\n    this.geometry = new SphereBufferGeometry(radius, meshDensity, meshDensity)\n  }\n\n  /** Internal utility to load texture and set the shader uniforms */\n  private setTextures(\n    texturePath: string,\n    depthPath: string,\n    textureType: TextureType,\n  ): void {\n    if (textureType === TextureType.SEPERATE) {\n      if (!depthPath) {\n        throw new Error(\n          'When using seperate textures you must provide a depth texture as well',\n        )\n      }\n\n      /** Load the depthmap */\n      this.load(depthPath)\n        .then(texture => {\n          /** Inform the shader we are providing two seperate textures and set the texture */\n          this.material.uniforms.isSeperate.value = true\n          this.material.uniforms.depthMap.value = texture\n        })\n        .catch(err => {\n          throw new Error(err)\n        })\n    } else {\n      this.material.uniforms.isSeperate.value = false\n    }\n\n    /** Load the texture */\n    this.load(texturePath)\n      .then(texture => {\n        this.material.uniforms.map.value = texture\n      })\n      .catch(err => {\n        throw new Error(err)\n      })\n  }\n\n  /** An internal util to create the scene Object3D */\n  protected createSceneObjectWithStyle(style: Style): Object3D {\n    switch (style) {\n      case Style.WIRE:\n        this.material.wireframe = true\n      case Style.MESH:\n        return new Mesh(this.geometry, this.material)\n      case Style.POINTS:\n        return new Points(this.geometry, this.material)\n    }\n  }\n\n  /** Promised wrapper for the TextureLoader */\n  protected load(texturePath: string): Promise<Texture> {\n    return new Promise((resolve, reject) => {\n      this.loader.load(\n        texturePath,\n        texture => resolve(texture),\n        undefined,\n        () => reject(`Error loading texture error`),\n      )\n    })\n  }\n\n  protected resetStyle(): void {\n    this.material.wireframe = false\n  }\n\n  /** Toggle vieweing texture or depthmap in viewer */\n  public toggleDepthDebug(state?: boolean): void {\n    this.material.uniforms.debugDepth.value =\n      state != undefined ? state : !this.material.uniforms.debugDepth.value\n  }\n\n  /** Setter for displacement amount */\n  public setDisplacement(amount: number): void {\n    this.material.uniforms.displacement.value = amount\n  }\n\n  public setStyle(style: Style): void {\n    super.remove(this.obj)\n    this.resetStyle()\n    this.obj = this.createSceneObjectWithStyle(style)\n    super.add(this.obj)\n  }\n\n  public setStyleFromString(style: string): void {\n    super.remove(this.obj)\n    this.resetStyle()\n    this.obj = this.createSceneObjectWithStyle(Style[style])\n    super.add(this.obj)\n  }\n}\n"],"names":["Style","MeshDensity","TextureType","Uniforms","map","type","value","depthMap","time","opacity","pointSize","debugDepth","isSeperate","displacement","Viewer","Object3D","constructor","texturePath","undefined","depthPath","textureType","TOP_BOTTOM","meshDensity","HIGH","style","MESH","props","loader","TextureLoader","obj","geometry","material","ShaderMaterial","uniforms","vertexShader","vert","fragmentShader","frag","transparent","side","BackSide","Error","createSphere","setTextures","setDisplacement","this","createSceneObjectWithStyle","add","radius","SphereBufferGeometry","SEPERATE","load","then","texture","_this","err","WIRE","wireframe","Mesh","POINTS","Points","Promise","resolve","reject","_this2","resetStyle","toggleDepthDebug","state","amount","setStyle","remove","setStyleFromString"],"mappings":"2OAAYA,ECAAC,ECAAC,kyDCECC,EAAmB,CAC9BC,IAAK,CACHC,KAAM,IACNC,MAAO,MAETC,SAAU,CACRF,KAAM,IACNC,MAAO,MAETE,KAAM,CACJH,KAAM,IACNC,MAAO,GAETG,QAAS,CACPJ,KAAM,IACNC,MAAO,GAETI,UAAW,CACTL,KAAM,IACNC,MAAO,GAETK,WAAY,CACVN,KAAM,IACNC,MAAO,GAETM,WAAY,CACVP,KAAM,IACNC,OAAO,GAETO,aAAc,CACZR,KAAM,IACNC,MAAO,KHjCCN,EAAAA,UAAAA,aAAAA,iBAAAA,EAAAA,qBAAAA,EAAAA,kBCAAC,EAAAA,gBAAAA,mBAAAA,gBAAAA,EAAAA,uBAAAA,EAAAA,mBAAAA,EAAAA,+BAAAA,EAAAA,qBCAAC,EAAAA,gBAAAA,mBAAAA,6BAAAA,EAAAA,yBEqBG,MAAMY,UAAeC,WAalCC,kBACEC,8DAAsBC,EACtBC,yCACAC,yDAA2BlB,cAAYmB,WACvCC,yDAA2BrB,cAAYsB,KACvCC,yDAAexB,QAAMyB,KACrBZ,yDAAuB,kBAlBlBa,kBACGC,OAAwB,IAAIC,qBAC5BC,gBACAC,qBACAC,SAA2B,IAAIC,iBAAe,CACtDC,SAAU9B,EACV+B,aAAcC,EACdC,eAAgBC,EAChBC,aAAa,EACbC,KAAMC,cAaDvB,QACG,IAAIwB,MAAM,4DAGbC,aAAa,EAAGpB,QAChBqB,YAAY1B,EAAaE,EAAWC,QACpCwB,gBAAgB/B,QAGhBgB,IAAMgB,KAAKC,2BAA2BtB,SACrCuB,IAAIF,KAAKhB,KAGTa,aAAaM,EAAgB1B,QAC9BQ,SAAW,IAAImB,uBAAqBD,EAAQ1B,EAAaA,GAIxDqB,YACN1B,EACAE,EACAC,iBAEIA,IAAgBlB,cAAYgD,SAAU,KACnC/B,QACG,IAAIsB,MACR,8EAKCU,KAAKhC,GACPiC,MAAK,SAAAC,GAEJC,EAAKvB,SAASE,SAASrB,WAAWN,OAAQ,EAC1CgD,EAAKvB,SAASE,SAAS1B,SAASD,MAAQ+C,YAEnC,SAAAE,SACC,IAAId,MAAMc,gBAGfxB,SAASE,SAASrB,WAAWN,OAAQ,OAIvC6C,KAAKlC,GACPmC,MAAK,SAAAC,GACJC,EAAKvB,SAASE,SAAS7B,IAAIE,MAAQ+C,YAE9B,SAAAE,SACC,IAAId,MAAMc,MAKZT,2BAA2BtB,UAC3BA,QACDxB,QAAMwD,UACJzB,SAAS0B,WAAY,OACvBzD,QAAMyB,YACF,IAAIiC,OAAKb,KAAKf,SAAUe,KAAKd,eACjC/B,QAAM2D,cACF,IAAIC,SAAOf,KAAKf,SAAUe,KAAKd,WAKlCoB,KAAKlC,qBACN,IAAI4C,SAAQ,SAACC,EAASC,GAC3BC,EAAKrC,OAAOwB,KACVlC,GACA,SAAAoC,UAAWS,EAAQT,UACnBnC,GACA,kBAAM6C,uCAKFE,kBACHlC,SAAS0B,WAAY,EAIrBS,iBAAiBC,QACjBpC,SAASE,SAAStB,WAAWL,MACvBY,MAATiD,EAAqBA,GAAStB,KAAKd,SAASE,SAAStB,WAAWL,MAI7DsC,gBAAgBwB,QAChBrC,SAASE,SAASpB,aAAaP,MAAQ8D,EAGvCC,SAAS7C,SACR8C,OAAOzB,KAAKhB,UACboC,kBACApC,IAAMgB,KAAKC,2BAA2BtB,SACrCuB,IAAIF,KAAKhB,KAGV0C,mBAAmB/C,SAClB8C,OAAOzB,KAAKhB,UACboC,kBACApC,IAAMgB,KAAKC,2BAA2B9C,QAAMwB,UAC3CuB,IAAIF,KAAKhB"}
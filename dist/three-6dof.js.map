{"version":3,"file":"three-6dof.js","sources":["../src/components/three.ts","../src/components/uniforms.ts","../src/components/style.ts","../src/components/density.ts","../src/components/texture.ts","../src/components/viewer.ts"],"sourcesContent":["/**\n * A small wrapper for THREE imports so rollup tree-shakes only the parts we need better\n */\n\n/* eslint  @typescript-eslint/camelcase: 0 */\n\nexport {\n  Object3D,\n  ShaderMaterial,\n  TextureLoader,\n  BackSide,\n  Mesh,\n  Points,\n  SphereBufferGeometry,\n  Texture,\n} from 'three'\n","import { Vector2, Vector4 } from 'three'\n\nexport const Uniforms: object = {\n  map: {\n    type: 't',\n    value: null,\n  },\n  depthMap: {\n    type: 't',\n    value: null,\n  },\n  time: {\n    type: 'f',\n    value: 0.0,\n  },\n  opacity: {\n    type: 'f',\n    value: 1.0,\n  },\n  pointSize: {\n    type: 'f',\n    value: 3.0,\n  },\n  debugDepth: {\n    type: 'f',\n    value: 0.0,\n  },\n  isSeperate: {\n    type: 'b',\n    value: false,\n  },\n  displacement: {\n    type: 'f',\n    value: 1.0,\n  },\n}\n","export enum Style {\n  WIRE = 0,\n  POINTS = 1,\n  MESH = 2,\n}\n","export enum MeshDensity {\n  LOW = 64,\n  MEDIUM = 128,\n  HIGH = 256,\n  EXTRA_HIGH = 512,\n  EPIC = 1024,\n}\n","export enum TextureType {\n  TOP_BOTTOM,\n  SEPERATE,\n}\n","import {\n  Object3D,\n  ShaderMaterial,\n  TextureLoader,\n  BackSide,\n  Mesh,\n  Points,\n  SphereBufferGeometry,\n  Texture,\n} from './three'\n\n// @ts-ignore\nimport frag from '../shaders/sixdof.frag'\n// @ts-ignore\nimport vert from '../shaders/sixdof.vert'\n\nimport { Uniforms } from './uniforms'\nimport { Style } from './style'\nimport { MeshDensity } from './density'\nimport { TextureType } from './texture'\n\nexport default class Viewer extends Object3D {\n  public props: object\n  protected loader: TextureLoader = new TextureLoader()\n  protected obj: Object3D\n  protected geometry: SphereBufferGeometry\n  protected material: ShaderMaterial = new ShaderMaterial({\n    uniforms: Uniforms,\n    vertexShader: vert,\n    fragmentShader: frag,\n    transparent: true,\n    side: BackSide,\n  })\n\n  constructor(\n    texturePath: string = undefined,\n    depthPath?: string,\n    textureType: TextureType = TextureType.TOP_BOTTOM,\n    meshDensity: MeshDensity = MeshDensity.HIGH,\n    style: Style = Style.MESH,\n    displacement: number = 1,\n  ) {\n    super()\n\n    if (!texturePath) {\n      throw new Error('Texture path must be defined when creating a viewer')\n    }\n\n    this.createSphere(10, meshDensity)\n    this.setTextures(texturePath, depthPath, textureType)\n    this.setDisplacement(displacement)\n\n    /** Create the Mesh/Points and add it to the viewer object */\n    this.obj = this.createSceneObjectWithStyle(style)\n    super.add(this.obj)\n  }\n\n  private createSphere(\n    radius: number,\n    meshDensity: MeshDensity,\n  ): void {\n    this.geometry = new SphereBufferGeometry(radius, meshDensity, meshDensity)\n  }\n\n  /** Internal utility to load texture and set the shader uniforms */\n  private setTextures(\n    texturePath: string,\n    depthPath: string,\n    textureType: TextureType,\n  ): void {\n    if (textureType === TextureType.SEPERATE) {\n      if (!depthPath) {\n        throw new Error(\n          'When using seperate textures you must provide a depth texture as well',\n        )\n      }\n\n      /** Load the depthmap */\n      this.load(depthPath)\n        .then(texture => {\n          /** Inform the shader we are providing two seperate textures and set the texture */\n          this.material.uniforms.isSeperate.value = true\n          this.material.uniforms.depthMap.value = texture\n        })\n        .catch(err => {\n          throw new Error(err)\n        })\n    } else {\n      this.material.uniforms.isSeperate.value = false\n    }\n\n    /** Load the texture */\n    this.load(texturePath)\n      .then(texture => {\n        this.material.uniforms.map.value = texture\n      })\n      .catch(err => {\n        throw new Error(err)\n      })\n  }\n\n  /** An internal util to create the scene Object3D */\n  protected createSceneObjectWithStyle(style: Style): Object3D {\n    switch (style) {\n      case Style.WIRE:\n        this.material.wireframe = true\n      case Style.MESH:\n        return new Mesh(this.geometry, this.material)\n      case Style.POINTS:\n        return new Points(this.geometry, this.material)\n    }\n  }\n\n  /** Promised wrapper for the TextureLoader */\n  protected load(texturePath: string): Promise<Texture> {\n    return new Promise((resolve, reject) => {\n      this.loader.load(\n        texturePath,\n        texture => resolve(texture),\n        undefined,\n        () => reject(`Error loading texture error`),\n      )\n    })\n  }\n\n  protected resetStyle(): void {\n    this.material.wireframe = false\n  }\n\n  /** Toggle vieweing texture or depthmap in viewer */\n  public toggleDepthDebug(state?: boolean): void {\n    this.material.uniforms.debugDepth.value =\n      state != undefined ? state : !this.material.uniforms.debugDepth.value\n  }\n\n  /** Setter for displacement amount */\n  public setDisplacement(amount: number): void {\n    this.material.uniforms.displacement.value = amount\n  }\n\n  public setStyle(style: Style): void {\n    super.remove(this.obj)\n    this.resetStyle()\n    this.obj = this.createSceneObjectWithStyle(style)\n    super.add(this.obj)\n  }\n\n  public setStyleFromString(style: string): void {\n    super.remove(this.obj)\n    this.resetStyle()\n    this.obj = this.createSceneObjectWithStyle(Style[style])\n    super.add(this.obj)\n  }\n}\n"],"names":["Uniforms","map","type","value","depthMap","time","opacity","pointSize","debugDepth","isSeperate","displacement","Style","MeshDensity","TextureType","Viewer","Object3D","constructor","texturePath","undefined","depthPath","textureType","TOP_BOTTOM","meshDensity","HIGH","style","MESH","props","loader","TextureLoader","obj","geometry","material","ShaderMaterial","uniforms","vertexShader","vert","fragmentShader","frag","transparent","side","BackSide","Error","createSphere","setTextures","setDisplacement","createSceneObjectWithStyle","add","radius","SphereBufferGeometry","SEPERATE","load","then","texture","err","WIRE","wireframe","Mesh","POINTS","Points","Promise","resolve","reject","resetStyle","toggleDepthDebug","state","amount","setStyle","remove","setStyleFromString"],"mappings":"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"}
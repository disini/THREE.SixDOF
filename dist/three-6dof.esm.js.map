{"version":3,"file":"three-6dof.esm.js","sources":["../src/components/three.ts","../src/components/uniforms.ts","../src/components/style.ts","../src/components/density.ts","../src/components/texture.ts","../src/components/viewer.ts"],"sourcesContent":["/**\n * A small wrapper for THREE imports so rollup tree-shakes only the parts we need better\n */\n\n/* eslint  @typescript-eslint/camelcase: 0 */\n\nexport {\n  Object3D,\n  ShaderMaterial,\n  TextureLoader,\n  BackSide,\n  Mesh,\n  Points,\n  SphereBufferGeometry,\n  Texture\n} from 'three'\n","import { Vector2, Vector4 } from 'three'\n\nexport const Uniforms: object = {\n  map: {\n    type: 't',\n    value: null,\n  },\n  depthMap: {\n    type: 't',\n    value: null,\n  },\n  time: {\n    type: 'f',\n    value: 0.0,\n  },\n  opacity: {\n    type: 'f',\n    value: 1.0,\n  },\n  pointSize: {\n    type: 'f',\n    value: 3.0,\n  },\n  debugDepth: {\n    type: 'f',\n    value: 0.0,\n  },\n  isSeperate: {\n    type: 'b',\n    value: false,\n  },\n  displacement: {\n    type: 'f',\n    value: 1.0,\n  },\n}\n","export enum Style {\n  WIRE = 0,\n  POINTS = 1,\n  MESH = 2,\n}\n","export enum MeshDensity {\n  LOW = 64,\n  MEDIUM = 128,\n  HIGH = 256,\n  EXTRA_HIGH = 512,\n  EPIC = 1024,\n}\n","export enum TextureType {\n  TOP_BOTTOM,\n  SEPERATE,\n}\n","import {\n  Object3D,\n  ShaderMaterial,\n  TextureLoader,\n  BackSide,\n  Mesh,\n  Points,\n  SphereBufferGeometry,\n  Texture,\n} from './three'\n\n// @ts-ignore\nimport frag from '../shaders/sixdof.frag'\n// @ts-ignore\nimport vert from '../shaders/sixdof.vert'\n\nimport { Uniforms } from './uniforms'\nimport { Style } from './style'\nimport { MeshDensity } from './density'\nimport { TextureType } from './texture'\n\nexport default class Viewer extends Object3D {\n  public props: object\n  protected loader: TextureLoader = new TextureLoader()\n  protected obj: Object3D\n  protected geometry: SphereBufferGeometry\n  protected material: ShaderMaterial = new ShaderMaterial({\n    uniforms: Uniforms,\n    vertexShader: vert,\n    fragmentShader: frag,\n    transparent: true,\n    side: BackSide,\n  })\n\n  constructor(\n    texturePath: string = undefined,\n    depthPath?: string,\n    textureType: TextureType = TextureType.TOP_BOTTOM,\n    meshDensity: MeshDensity = MeshDensity.HIGH,\n    style: Style = Style.MESH,\n    displacement: number = 1,\n  ) {\n    super()\n\n    if (!texturePath) {\n      throw new Error('Texture path must be defined when creating a viewer')\n    }\n\n    this.createSphere(6, meshDensity)\n    this.setTextures(texturePath, depthPath, textureType)\n    this.setDisplacement(displacement)\n\n    /** Create the Mesh/Points and add it to the viewer object */\n    this.obj = this.createSceneObjectWithStyle(style)\n    super.add(this.obj)\n  }\n\n  private createSphere(radius: number, meshDensity: MeshDensity): void {\n    this.geometry = new SphereBufferGeometry(radius, meshDensity, meshDensity)\n  }\n\n  /** Internal utility to load texture and set the shader uniforms */\n  private setTextures(\n    texturePath: string,\n    depthPath: string,\n    textureType: TextureType,\n  ): void {\n    if (textureType === TextureType.SEPERATE) {\n      if (!depthPath) {\n        throw new Error(\n          'When using seperate textures you must provide a depth texture as well',\n        )\n      }\n\n      /** Load the depthmap */\n      this.load(depthPath)\n        .then(texture => {\n          /** Inform the shader we are providing two seperate textures and set the texture */\n          this.material.uniforms.isSeperate.value = true\n          this.material.uniforms.depthMap.value = texture\n        })\n        .catch(err => {\n          throw new Error(err)\n        })\n    } else {\n      this.material.uniforms.isSeperate.value = false\n    }\n\n    /** Load the texture */\n    this.load(texturePath)\n      .then(texture => {\n        this.material.uniforms.map.value = texture\n      })\n      .catch(err => {\n        throw new Error(err)\n      })\n  }\n\n  /** An internal util to create the scene Object3D */\n  protected createSceneObjectWithStyle(style: Style): Object3D {\n    switch (style) {\n      case Style.WIRE:\n        this.material.wireframe = true\n      case Style.MESH:\n        return new Mesh(this.geometry, this.material)\n      case Style.POINTS:\n        return new Points(this.geometry, this.material)\n    }\n  }\n\n  /** Promised wrapper for the TextureLoader */\n  protected load(texturePath: string): Promise<Texture> {\n    return new Promise((resolve, reject) => {\n      this.loader.load(\n        texturePath,\n        texture => resolve(texture),\n        undefined,\n        () => reject(`Error loading texture error`),\n      )\n    })\n  }\n\n  protected resetStyle(): void {\n    this.material.wireframe = false\n  }\n\n  /** Toggle vieweing texture or depthmap in viewer */\n  public toggleDepthDebug(state?: boolean): void {\n    this.material.uniforms.debugDepth.value =\n      state != undefined ? state : !this.material.uniforms.debugDepth.value\n  }\n\n  /** Setter for displacement amount */\n  public setDisplacement(amount: number): void {\n    this.material.uniforms.displacement.value = amount\n  }\n\n  public setStyle(style: Style): void {\n    super.remove(this.obj)\n    this.resetStyle()\n    this.obj = this.createSceneObjectWithStyle(style)\n    super.add(this.obj)\n  }\n\n  public setStyleFromString(style: string): void {\n    super.remove(this.obj)\n    this.resetStyle()\n    this.obj = this.createSceneObjectWithStyle(Style[style])\n    super.add(this.obj)\n  }\n}\n"],"names":["Uniforms","map","type","value","depthMap","time","opacity","pointSize","debugDepth","isSeperate","displacement","Style","MeshDensity","TextureType","Viewer","Object3D","constructor","texturePath","undefined","depthPath","textureType","TOP_BOTTOM","meshDensity","HIGH","style","MESH","props","loader","TextureLoader","obj","geometry","material","ShaderMaterial","uniforms","vertexShader","vert","fragmentShader","frag","transparent","side","BackSide","Error","createSphere","setTextures","setDisplacement","createSceneObjectWithStyle","add","radius","SphereBufferGeometry","SEPERATE","load","then","texture","err","WIRE","wireframe","Mesh","POINTS","Points","Promise","resolve","reject","resetStyle","toggleDepthDebug","state","amount","setStyle","remove","setStyleFromString"],"mappings":"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"}
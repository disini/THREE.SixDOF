{"version":3,"file":"three-6dof.esm.js","sources":["../src/uniforms.ts","../src/index.ts"],"sourcesContent":["import {\n    Vector2,\n    Vector4\n} from 'three'\n\nconst Uniforms = {\n    'map': {\n        type: 't',\n        value: null\n    },\n    'depthMap': {\n        type: 't',\n        value: null\n    },\n    'time': {\n        type: 'f',\n        value: 0.0\n    },\n    'opacity': {\n        type: 'f',\n        value: 1.0\n    },\n    'pointSize': {\n        type: 'f',\n        value: 3.0\n    },\n    'debugDepth': {\n        type: 'f',\n        value: 0.0\n    },\n    'isSeperate': {\n        type: 'b',\n        value: false\n    }\n}\n\nexport default Uniforms","import {\n    Object3D,\n    Material,\n    ShaderMaterial,\n    TextureLoader,\n    BackSide,\n    Mesh,\n    Points,\n    SphereBufferGeometry\n} from 'three'\n\n// Load shaders\nimport frag from './shaders/sixdof.frag'\nimport vert from './shaders/sixdof.vert'\n\nimport Uniforms from './uniforms'\n\nenum TextureType {\n    TOP_BOTTOM,\n    SEPERATE\n}\n\nenum MeshDensity {\n    LOW = 64,\n    MEDIUM = 128,\n    HIGH = 256,\n    EXTRA_HIGH = 512\n}\n\nenum Style {\n    WIRE,\n    POINTS,\n    MESH\n}\n\nclass Viewer extends Object3D {\n    public props: object\n    protected loader: TextureLoader = new TextureLoader()\n    protected obj: Object3D\n    protected geometry: SphereBufferGeometry\n    protected material: Material = new ShaderMaterial({\n        uniforms: Uniforms,\n        vertexShader: vert,\n        fragmentShader: frag,\n        transparent: true,\n        side: BackSide\n    })\n\n    constructor(\n        texturePath: string = undefined,\n        depthPath?: string,\n        textureType: TextureType = TextureType.SEPERATE,\n        meshDensity: MeshDensity = MeshDensity.EXTRA_HIGH,\n        style: Style = Style.MESH,\n        displacement: number = 1\n    ) {\n        super()\n\n        if (!texturePath) throw new Error('Texture path must be defined when creating a viewer')\n\n        this.geometry = new SphereBufferGeometry(10, meshDensity, meshDensity)\n\n        if (textureType === TextureType.SEPERATE) {\n            if (!depthPath) throw new Error('When using seperate textures you must provide a depth texture as well')\n\n            // Inform the shader we are providing two seperate textures\n            this.material.uniforms.isSeperate.value = true\n\n            // Load the depth map\n            this.load(depthPath)\n                .then(texture => {\n                    this.material.uniforms.depthMap.value = texture\n                })\n                .catch(err => { throw new Error(err) })\n        }\n\n        // Load the texture\n        this.load(texturePath)\n            .then(texture => {\n                this.material.uniforms.map.value = texture\n            })\n            .catch(err => { throw new Error(err) })\n\n        // Create the Mesh/Points and add it to the viewer object\n        this.obj = this.createSceneObjectWithStyle(style)\n        this.add(this.obj)\n    }\n\n    protected createSceneObjectWithStyle(style: Style): Object3D {\n        switch (style) {\n            case Style.WIRE:\n                this.material.wireframe = true\n            case Style.MESH:\n                return new Mesh(this.geometry, this.material)\n            case Style.POINTS:\n                return new Points(this.geometry, this.material)\n        }\n    }\n\n    protected load(texturePath: string): Promise<string> {\n        return new Promise((resolve, reject) => {\n            this.loader.load(\n                texturePath,\n                texture => resolve(texture),\n                undefined,\n                () => reject(`Error loading texture error`)\n            )\n        })\n    }\n}\n\nexport { Viewer, TextureType }"],"names":["Uniforms","type","value","TextureType","MeshDensity","Style","Viewer","Object3D","constructor","texturePath","undefined","depthPath","textureType","SEPERATE","meshDensity","EXTRA_HIGH","style","MESH","props","loader","TextureLoader","obj","geometry","material","ShaderMaterial","uniforms","vertexShader","vert","fragmentShader","frag","transparent","side","BackSide","Error","SphereBufferGeometry","isSeperate","load","then","texture","depthMap","err","map","createSceneObjectWithStyle","add","WIRE","wireframe","Mesh","POINTS","Points","Promise","resolve","reject"],"mappings":"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"}
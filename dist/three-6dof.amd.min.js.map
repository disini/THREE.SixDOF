{"version":3,"file":"three-6dof.amd.min.js","sources":["../src/index.ts","../src/uniforms.ts"],"sourcesContent":["import {\n  Object3D,\n  Material,\n  ShaderMaterial,\n  TextureLoader,\n  BackSide,\n  Mesh,\n  Points,\n  SphereBufferGeometry,\n} from 'three'\n\n// Load shaders\nimport frag from './shaders/sixdof.frag'\nimport vert from './shaders/sixdof.vert'\n\nimport Uniforms from './uniforms'\n\nenum TextureType {\n  TOP_BOTTOM,\n  SEPERATE,\n}\n\nenum MeshDensity {\n  LOW = 64,\n  MEDIUM = 128,\n  HIGH = 256,\n  EXTRA_HIGH = 512,\n}\n\nenum Style {\n  WIRE,\n  POINTS,\n  MESH,\n}\n\nclass Viewer extends Object3D {\n  public props: object\n  protected loader: TextureLoader = new TextureLoader()\n  protected obj: Object3D\n  protected geometry: SphereBufferGeometry\n  protected material: Material = new ShaderMaterial({\n    uniforms: Uniforms,\n    vertexShader: vert,\n    fragmentShader: frag,\n    transparent: true,\n    side: BackSide,\n  })\n\n  constructor(\n    texturePath: string = undefined,\n    depthPath?: string,\n    textureType: TextureType = TextureType.SEPERATE,\n    meshDensity: MeshDensity = MeshDensity.EXTRA_HIGH,\n    style: Style = Style.MESH,\n    displacement: number = 1,\n  ) {\n    super()\n\n    if (!texturePath) {\n      throw new Error('Texture path must be defined when creating a viewer')\n    }\n\n    this.geometry = new SphereBufferGeometry(10, meshDensity, meshDensity)\n\n    this.material.uniforms.displacement.value = displacement\n\n    if (textureType === TextureType.SEPERATE) {\n      if (!depthPath) {\n        throw new Error(\n          'When using seperate textures you must provide a depth texture as well',\n        )\n      }\n\n      // Inform the shader we are providing two seperate textures\n      this.material.uniforms.isSeperate.value = true\n\n      // Load the depth map\n      this.load(depthPath)\n        .then(texture => {\n          this.material.uniforms.depthMap.value = texture\n        })\n        .catch(err => {\n          throw new Error(err)\n        })\n    }\n\n    // Load the texture\n    this.load(texturePath)\n      .then(texture => {\n        this.material.uniforms.map.value = texture\n      })\n      .catch(err => {\n        throw new Error(err)\n      })\n\n    // Create the Mesh/Points and add it to the viewer object\n    this.obj = this.createSceneObjectWithStyle(style)\n    this.add(this.obj)\n  }\n\n  /** An internal util to create the scene Object3D */\n  protected createSceneObjectWithStyle(style: Style): Object3D {\n    switch (style) {\n      case Style.WIRE:\n        this.material.wireframe = true\n      case Style.MESH:\n        return new Mesh(this.geometry, this.material)\n      case Style.POINTS:\n        return new Points(this.geometry, this.material)\n    }\n  }\n\n  /** Promised wrapper for the TextureLoader */\n  protected load(texturePath: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      this.loader.load(\n        texturePath,\n        texture => resolve(texture),\n        undefined,\n        () => reject(`Error loading texture error`),\n      )\n    })\n  }\n\n  /** Toggle vieweing texture or depthmap in viewer */\n  public toggleDepthDebug(state?: boolean): void {\n    this.material.uniforms.debugDepth.value =\n      state != undefined ? state : !this.material.uniforms.debugDepth.value\n  }\n\n  /** Setter for displacement amount */\n  public setDisplacement(amount: number): void {\n    this.material.uniforms.displacement.value = amount\n  }\n}\n\nexport { Viewer, TextureType }\n","import { Vector2, Vector4 } from 'three'\n\nconst Uniforms = {\n  map: {\n    type: 't',\n    value: null,\n  },\n  depthMap: {\n    type: 't',\n    value: null,\n  },\n  time: {\n    type: 'f',\n    value: 0.0,\n  },\n  opacity: {\n    type: 'f',\n    value: 1.0,\n  },\n  pointSize: {\n    type: 'f',\n    value: 3.0,\n  },\n  debugDepth: {\n    type: 'f',\n    value: 0.0,\n  },\n  isSeperate: {\n    type: 'b',\n    value: false,\n  },\n  displacement: {\n    type: 'f',\n    value: 1.0,\n  },\n}\n\nexport default Uniforms\n"],"names":["TextureType","MeshDensity","Style","Uniforms","map","type","value","depthMap","time","opacity","pointSize","debugDepth","isSeperate","displacement","Viewer","Object3D","constructor","texturePath","undefined","depthPath","textureType","SEPERATE","meshDensity","EXTRA_HIGH","style","MESH","props","loader","TextureLoader","obj","geometry","material","ShaderMaterial","uniforms","vertexShader","vert","fragmentShader","frag","transparent","side","BackSide","Error","SphereBufferGeometry","load","then","texture","_this","err","this","createSceneObjectWithStyle","add","WIRE","wireframe","Mesh","POINTS","Points","Promise","resolve","reject","_this2","toggleDepthDebug","state","setDisplacement","amount"],"mappings":"2DAiBKA,EAKAC,EAOAC,o8BC3BCC,EAAW,CACfC,IAAK,CACHC,KAAM,IACNC,MAAO,MAETC,SAAU,CACRF,KAAM,IACNC,MAAO,MAETE,KAAM,CACJH,KAAM,IACNC,MAAO,GAETG,QAAS,CACPJ,KAAM,IACNC,MAAO,GAETI,UAAW,CACTL,KAAM,IACNC,MAAO,GAETK,WAAY,CACVN,KAAM,IACNC,MAAO,GAETM,WAAY,CACVP,KAAM,IACNC,OAAO,GAETO,aAAc,CACZR,KAAM,IACNC,MAAO,KDhBNN,EAAAA,gBAAAA,mBAAAA,6BAAAA,EAAAA,kCAKAC,GAAAA,EAAAA,gBAAAA,EAAAA,uBAAAA,EAAAA,mBAAAA,EAAAA,gCAAAA,IAAAA,gBAOAC,GAAAA,EAAAA,iBAAAA,EAAAA,qBAAAA,EAAAA,kBAAAA,IAAAA,OAML,MAAMY,UAAeC,WAanBC,oBACEC,8DAAsBC,EACtBC,yCACAC,yDAA2BpB,cAAYqB,SACvCC,yDAA2BrB,EAAYsB,WACvCC,yDAAetB,EAAMuB,KACrBZ,yDAAuB,yBAlBlBa,kBACGC,OAAwB,IAAIC,qBAC5BC,gBACAC,qBACAC,SAAqB,IAAIC,iBAAe,CAChDC,SAAU9B,EACV+B,aAAcC,EACdC,eAAgBC,EAChBC,aAAa,EACbC,KAAMC,cAaDvB,QACG,IAAIwB,MAAM,+DAGbX,SAAW,IAAIY,uBAAqB,GAAIpB,EAAaA,QAErDS,SAASE,SAASpB,aAAaP,MAAQO,EAExCO,IAAgBpB,cAAYqB,SAAU,KACnCF,QACG,IAAIsB,MACR,8EAKCV,SAASE,SAASrB,WAAWN,OAAQ,OAGrCqC,KAAKxB,GACPyB,MAAK,SAAAC,GACJC,EAAKf,SAASE,SAAS1B,SAASD,MAAQuC,YAEnC,SAAAE,SACC,IAAIN,MAAMM,WAKjBJ,KAAK1B,GACP2B,MAAK,SAAAC,GACJC,EAAKf,SAASE,SAAS7B,IAAIE,MAAQuC,YAE9B,SAAAE,SACC,IAAIN,MAAMM,WAIflB,IAAMmB,KAAKC,2BAA2BzB,QACtC0B,IAAIF,KAAKnB,KAINoB,2BAA2BzB,UAC3BA,QACDtB,EAAMiD,UACJpB,SAASqB,WAAY,OACvBlD,EAAMuB,YACF,IAAI4B,OAAKL,KAAKlB,SAAUkB,KAAKjB,eACjC7B,EAAMoD,cACF,IAAIC,SAAOP,KAAKlB,SAAUkB,KAAKjB,WAKlCY,KAAK1B,qBACN,IAAIuC,SAAQ,SAACC,EAASC,GAC3BC,EAAKhC,OAAOgB,KACV1B,GACA,SAAA4B,UAAWY,EAAQZ,UACnB3B,GACA,kBAAMwC,uCAMLE,iBAAiBC,QACjB9B,SAASE,SAAStB,WAAWL,MACvBY,MAAT2C,EAAqBA,GAASb,KAAKjB,SAASE,SAAStB,WAAWL,MAI7DwD,gBAAgBC,QAChBhC,SAASE,SAASpB,aAAaP,MAAQyD"}
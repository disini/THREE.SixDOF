{"version":3,"file":"three-6dof.amd.js","sources":["../src/uniforms.ts","../src/index.ts"],"sourcesContent":["import { Vector2, Vector4 } from 'three'\n\nconst Uniforms = {\n  map: {\n    type: 't',\n    value: null,\n  },\n  depthMap: {\n    type: 't',\n    value: null,\n  },\n  time: {\n    type: 'f',\n    value: 0.0,\n  },\n  opacity: {\n    type: 'f',\n    value: 1.0,\n  },\n  pointSize: {\n    type: 'f',\n    value: 3.0,\n  },\n  debugDepth: {\n    type: 'f',\n    value: 0.0,\n  },\n  isSeperate: {\n    type: 'b',\n    value: false,\n  },\n  displacement: {\n    type: 'f',\n    value: 1.0,\n  },\n}\n\nexport default Uniforms\n","import {\n  Object3D,\n  Material,\n  ShaderMaterial,\n  TextureLoader,\n  BackSide,\n  Mesh,\n  Points,\n  SphereBufferGeometry,\n} from 'three'\n\n// Load shaders\nimport frag from './shaders/sixdof.frag'\nimport vert from './shaders/sixdof.vert'\n\nimport Uniforms from './uniforms'\n\nenum TextureType {\n  TOP_BOTTOM,\n  SEPERATE,\n}\n\nenum MeshDensity {\n  LOW = 64,\n  MEDIUM = 128,\n  HIGH = 256,\n  EXTRA_HIGH = 512,\n}\n\nenum Style {\n  WIRE,\n  POINTS,\n  MESH,\n}\n\nclass Viewer extends Object3D {\n  public props: object\n  protected loader: TextureLoader = new TextureLoader()\n  protected obj: Object3D\n  protected geometry: SphereBufferGeometry\n  protected material: Material = new ShaderMaterial({\n    uniforms: Uniforms,\n    vertexShader: vert,\n    fragmentShader: frag,\n    transparent: true,\n    side: BackSide,\n  })\n\n  constructor(\n    texturePath: string = undefined,\n    depthPath?: string,\n    textureType: TextureType = TextureType.SEPERATE,\n    meshDensity: MeshDensity = MeshDensity.EXTRA_HIGH,\n    style: Style = Style.MESH,\n    displacement: number = 1,\n  ) {\n    super()\n\n    if (!texturePath) {\n      throw new Error('Texture path must be defined when creating a viewer')\n    }\n\n    this.geometry = new SphereBufferGeometry(10, meshDensity, meshDensity)\n\n    this.material.uniforms.displacement.value = displacement\n\n    if (textureType === TextureType.SEPERATE) {\n      if (!depthPath) {\n        throw new Error(\n          'When using seperate textures you must provide a depth texture as well',\n        )\n      }\n\n      // Inform the shader we are providing two seperate textures\n      this.material.uniforms.isSeperate.value = true\n\n      // Load the depth map\n      this.load(depthPath)\n        .then(texture => {\n          this.material.uniforms.depthMap.value = texture\n        })\n        .catch(err => {\n          throw new Error(err)\n        })\n    }\n\n    // Load the texture\n    this.load(texturePath)\n      .then(texture => {\n        this.material.uniforms.map.value = texture\n      })\n      .catch(err => {\n        throw new Error(err)\n      })\n\n    // Create the Mesh/Points and add it to the viewer object\n    this.obj = this.createSceneObjectWithStyle(style)\n    this.add(this.obj)\n  }\n\n  /** An internal util to create the scene Object3D */\n  protected createSceneObjectWithStyle(style: Style): Object3D {\n    switch (style) {\n      case Style.WIRE:\n        this.material.wireframe = true\n      case Style.MESH:\n        return new Mesh(this.geometry, this.material)\n      case Style.POINTS:\n        return new Points(this.geometry, this.material)\n    }\n  }\n\n  /** Promised wrapper for the TextureLoader */\n  protected load(texturePath: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n      this.loader.load(\n        texturePath,\n        texture => resolve(texture),\n        undefined,\n        () => reject(`Error loading texture error`),\n      )\n    })\n  }\n\n  /** Toggle vieweing texture or depthmap in viewer */\n  public toggleDepthDebug(state?: boolean): void {\n    this.material.uniforms.debugDepth.value =\n      state != undefined ? state : !this.material.uniforms.debugDepth.value\n  }\n\n  /** Setter for displacement amount */\n  public setDisplacement(amount: number): void {\n    this.material.uniforms.displacement.value = amount\n  }\n}\n\nexport { Viewer, TextureType }\n"],"names":["Uniforms","map","type","value","depthMap","time","opacity","pointSize","debugDepth","isSeperate","displacement","TextureType","MeshDensity","Style","Viewer","Object3D","constructor","texturePath","undefined","depthPath","textureType","SEPERATE","meshDensity","EXTRA_HIGH","style","MESH","props","loader","TextureLoader","obj","geometry","material","ShaderMaterial","uniforms","vertexShader","vert","fragmentShader","frag","transparent","side","BackSide","Error","SphereBufferGeometry","load","then","texture","err","createSceneObjectWithStyle","add","WIRE","wireframe","Mesh","POINTS","Points","Promise","resolve","reject","toggleDepthDebug","state","setDisplacement","amount"],"mappings":"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"}
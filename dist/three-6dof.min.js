!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("three")):"function"==typeof define&&define.amd?define(["exports","three"],t):t((e=e||self).SixDOF={},e.THREE)}(this,(function(e,t){"use strict";var n,r,i,a="#define GLSLIFY 1\nuniform sampler2D map;\nuniform sampler2D depthMap;\nuniform float debugDepth;\nuniform bool isSeperate;\nuniform float opacity;\n\nvarying vec2 vUv;\nvarying vec3 vNormal;\n\nvoid main() {\n\n    // If it's a single texture crop the uvs used to read the textures\n    vec2 depthUvs = isSeperate ? vUv : vec2(vUv.x, vUv.y * 0.5);\n    vec2 colorUvs = isSeperate ? vUv : vec2(vUv.x, (vUv.y * 0.5) + 0.5);\n\n    vec3 depth;\n\n    // @TODO This is a pretty expansive op perhaps split it into two shaders and pick one when compiling the WebGL program\n    if (isSeperate) {\n        depth = texture2D(depthMap, depthUvs).rgb;\n    } else {\n        depth = texture2D(map, depthUvs).rgb;\n    }\n    vec3 color = texture2D(map, colorUvs).rgb;\n\n    // Mix the depth and color based on debugDepth value\n    vec3 depthColorMixer = mix(color, depth , debugDepth);\n\n    // Render dat fragment\n    gl_FragColor = vec4(depthColorMixer, opacity);\n}",o="#define GLSLIFY 1\nvarying vec2 vUv;\nvarying vec3 vNormal;\n\nuniform sampler2D map;\nuniform sampler2D depthMap;\nuniform bool isSeperate;\nuniform float pointSize;\nuniform float displacement;\n\nvoid main() {\n    vUv = uv;\n    vNormal = normalMatrix * normal;\n    gl_PointSize = pointSize;\n\n    // Transform the vert by the depth value (per vertex in the normals direction)\n    vec3 vertPos = position;\n    vec2 depthUvs = isSeperate ? uv : vec2(uv.x, uv.y * 0.5);\n    vec4 depth;\n\n    // @TODO This is a pretty expansive op perhaps split it into two shaders and pick one when compiling the WebGL program\n    if (isSeperate) {\n        depth = texture2D(depthMap, depthUvs);\n    } else {\n        depth = texture2D(map, depthUvs);\n    }\n    vertPos += (depth.r * vNormal) * displacement;\n\n    gl_Position = projectionMatrix *\n                    modelViewMatrix *\n                    vec4(vertPos, 1.0);\n}",s={map:{type:"t",value:null},depthMap:{type:"t",value:null},time:{type:"f",value:0},opacity:{type:"f",value:1},pointSize:{type:"f",value:3},debugDepth:{type:"f",value:0},isSeperate:{type:"b",value:!1},displacement:{type:"f",value:1}};!function(e){e[e.WIRE=0]="WIRE",e[e.POINTS=1]="POINTS",e[e.MESH=2]="MESH"}(n||(n={})),(r=e.MeshDensity||(e.MeshDensity={}))[r.LOW=64]="LOW",r[r.MEDIUM=128]="MEDIUM",r[r.HIGH=256]="HIGH",r[r.EXTRA_HIGH=512]="EXTRA_HIGH",(i=e.TextureType||(e.TextureType={}))[i.TOP_BOTTOM=0]="TOP_BOTTOM",i[i.SEPERATE=1]="SEPERATE";class p extends t.Object3D{constructor(){var r,i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:void 0,p=arguments.length>1?arguments[1]:void 0,h=arguments.length>2&&void 0!==arguments[2]?arguments[2]:e.TextureType.TOP_BOTTOM,l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:e.MeshDensity.HIGH,v=arguments.length>4&&void 0!==arguments[4]?arguments[4]:n.MESH,u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1;if(super(),r=this,this.props=void 0,this.loader=new t.TextureLoader,this.obj=void 0,this.geometry=void 0,this.material=new t.ShaderMaterial({uniforms:s,vertexShader:o,fragmentShader:a,transparent:!0,side:t.BackSide}),!i)throw new Error("Texture path must be defined when creating a viewer");if(this.geometry=new t.SphereBufferGeometry(10,l,l),this.material.uniforms.displacement.value=u,h===e.TextureType.SEPERATE){if(!p)throw new Error("When using seperate textures you must provide a depth texture as well");this.material.uniforms.isSeperate.value=!0,this.load(p).then((function(e){r.material.uniforms.depthMap.value=e})).catch((function(e){throw new Error(e)}))}else this.material.uniforms.isSeperate.value=!1;this.load(i).then((function(e){r.material.uniforms.map.value=e})).catch((function(e){throw new Error(e)})),this.obj=this.createSceneObjectWithStyle(v),this.add(this.obj)}createSceneObjectWithStyle(e){switch(e){case n.WIRE:this.material.wireframe=!0;case n.MESH:return new t.Mesh(this.geometry,this.material);case n.POINTS:return new t.Points(this.geometry,this.material)}}load(e){var t=this;return new Promise((function(n,r){t.loader.load(e,(function(e){return n(e)}),void 0,(function(){return r("Error loading texture error")}))}))}toggleDepthDebug(e){this.material.uniforms.debugDepth.value=null!=e?e:!this.material.uniforms.debugDepth.value}setDisplacement(e){this.material.uniforms.displacement.value=e}}e.Viewer=p,Object.defineProperty(e,"__esModule",{value:!0})}));
//# sourceMappingURL=three-6dof.min.js.map
